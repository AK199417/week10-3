name: Backend CI - Test, Build and Push Images to ACR

on:
  workflow_call:
    inputs:
      acr_login_server:
        required: true
        type: string
  pull_request:
    branches: [ main, dev, develop ]

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: public.ecr.aws/docker/library/postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "5432:5432"

      order_db:
        image: public.ecr.aws/docker/library/postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "5433:5432"

      customer_db:
        image: public.ecr.aws/docker/library/postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customers
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "5434:5432"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        shell: bash
        run: |
          set -Eeuo pipefail
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run customer_service tests
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends
    if: ${{ needs.test_and_lint_backends.result == 'success' && github.event_name != 'pull_request' }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Resolve ACR and SHORT_SHA
        shell: bash
        run: |
          set -Eeuo pipefail
          ACR_LOGIN_SERVER="${{ inputs.acr_login_server }}"
          [ -n "$ACR_LOGIN_SERVER" ] || { echo "Missing input: acr_login_server"; exit 1; }
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV
          ACR_NAME="${ACR_LOGIN_SERVER%%.*}"
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Login to Azure Container Registry
        shell: bash
        run: az acr login --name "$ACR_NAME"

      # >>> New step: rewrite backend Dockerfiles to use ECR Public mirror for Python base images
      - name: Patch backend Dockerfiles to use ECR Public base images
        shell: bash
        run: |
          set -Eeuo pipefail
          for df in backend/*/Dockerfile; do
            echo "Patching $df"
            # Replace lines like: FROM python:3.10-slim-buster
            sed -i -E 's|^FROM[[:space:]]+python:([[:alnum:]._-]+)|FROM public.ecr.aws/docker/library/python:\1|' "$df"
          done
          echo "Patched Dockerfiles:"
          grep -R --line-number '^FROM ' backend/*/Dockerfile || true

      - name: Build & Push product_service
        shell: bash
        run: |
          set -Eeuo pipefail
          docker build \
            -t "$ACR_LOGIN_SERVER/product_service:latest" \
            -t "$ACR_LOGIN_SERVER/product_service:$SHORT_SHA" \
            ./backend/product_service/
          docker push "$ACR_LOGIN_SERVER/product_service:latest"
          docker push "$ACR_LOGIN_SERVER/product_service:$SHORT_SHA"

      - name: Build & Push order_service
        shell: bash
        run: |
          set -Eeuo pipefail
          docker build \
            -t "$ACR_LOGIN_SERVER/order_service:latest" \
            -t "$ACR_LOGIN_SERVER/order_service:$SHORT_SHA" \
            ./backend/order_service/
          docker push "$ACR_LOGIN_SERVER/order_service:latest"
          docker push "$ACR_LOGIN_SERVER/order_service:$SHORT_SHA"

      - name: Build & Push customer_service
        shell: bash
        run: |
          set -Eeuo pipefail
          docker build \
            -t "$ACR_LOGIN_SERVER/customer_service:latest" \
            -t "$ACR_LOGIN_SERVER/customer_service:$SHORT_SHA" \
            ./backend/customer_service/
          docker push "$ACR_LOGIN_SERVER/customer_service:latest"
          docker push "$ACR_LOGIN_SERVER/customer_service:$SHORT_SHA"

      - name: Logout Azure
        if: always()
        run: az logout

name: CD - Deploy Frontend to AKS

on:
  workflow_call:
    inputs:
      product_api_ip:
        required: true
        type: string
      order_api_ip:
        required: true
        type: string
      customer_api_ip:
        required: true
        type: string
      k8s_namespace:
        required: true
        type: string
      aks_cluster_name:
        required: false
        type: string
      aks_resource_group:
        required: false
        type: string
      acr_login_server:
        required: true
        type: string
      frontend_tag:
        required: false
        type: string
  workflow_dispatch: {}

permissions:
  contents: read

env:
  FRONTEND_DEPLOY:   frontend-w05-aks
  FRONTEND_CONTAINER: frontend-container

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Resolve inputs
        shell: bash
        run: |
          set -Eeuo pipefail
          NS="${{ inputs.k8s_namespace }}"
          echo "K8S_NAMESPACE_RESOLVED=$NS" >> $GITHUB_ENV

          AKS_RG="${{ inputs.aks_resource_group }}"
          AKS_NAME="${{ inputs.aks_cluster_name }}"
          [ -n "$AKS_RG" ] && [ -n "$AKS_NAME" ] || { echo "Missing aks_resource_group/aks_cluster_name"; exit 1; }
          echo "AKS_RESOURCE_GROUP=$AKS_RG" >> $GITHUB_ENV
          echo "AKS_CLUSTER_NAME=$AKS_NAME" >> $GITHUB_ENV

          ACR_LOGIN_SERVER="${{ inputs.acr_login_server }}"
          [ -n "$ACR_LOGIN_SERVER" ] || { echo "Missing input: acr_login_server"; exit 1; }
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV
          ACR_NAME="${ACR_LOGIN_SERVER%%.*}"
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV

          FRONTEND_TAG="${{ inputs.frontend_tag }}"
          [ -z "$FRONTEND_TAG" ] && FRONTEND_TAG="latest"
          echo "FRONTEND_TAG=$FRONTEND_TAG" >> $GITHUB_ENV

      # --- Attach ACR to AKS (idempotent) ---
      - name: Attach ACR to AKS (idempotent)
        shell: bash
        run: |
          set -Eeuo pipefail
          az aks update -g "$AKS_RESOURCE_GROUP" -n "$AKS_CLUSTER_NAME" --attach-acr "$ACR_NAME" || true

      - name: Set AKS context
        shell: bash
        run: |
          az aks get-credentials -g "$AKS_RESOURCE_GROUP" -n "$AKS_CLUSTER_NAME" --overwrite-existing
          kubectl cluster-info

      - name: Ensure namespace exists
        shell: bash
        run: |
          kubectl get ns "$K8S_NAMESPACE_RESOLVED" >/dev/null 2>&1 || kubectl create ns "$K8S_NAMESPACE_RESOLVED"

      # --- Fallback imagePullSecret ---
      - name: Create/patch ACR imagePullSecret (fallback)
        shell: bash
        run: |
          set -Eeuo pipefail
          NS="$K8S_NAMESPACE_RESOLVED"
          az acr update -n "$ACR_NAME" --admin-enabled true >/dev/null
          ACR_USER=$(az acr credential show -n "$ACR_NAME" --query username -o tsv)
          ACR_PASS=$(az acr credential show -n "$ACR_NAME" --query 'passwords[0].value' -o tsv)
          kubectl -n "$NS" delete secret acr-pull --ignore-not-found
          kubectl -n "$NS" create secret docker-registry acr-pull \
            --docker-server="$ACR_LOGIN_SERVER" \
            --docker-username="$ACR_USER" \
            --docker-password="$ACR_PASS"
          kubectl -n "$NS" patch serviceaccount default -p '{"imagePullSecrets":[{"name":"acr-pull"}]}' || true

      - name: Inject backend URLs into main.js
        shell: bash
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g"   frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g"       frontend/main.js
          sed -i "s|_CUSTOMER_API_URL_|${{ inputs.customer_api_ip }}|g" frontend/main.js

      - name: Apply manifests
        shell: bash
        run: |
          kubectl apply -n "$K8S_NAMESPACE_RESOLVED" -f k8s/frontend.yaml

      - name: Set image and rollout
        shell: bash
        run: |
          set -Eeuo pipefail
          NS="$K8S_NAMESPACE_RESOLVED"
          ACR="$ACR_LOGIN_SERVER"
          TAG="$FRONTEND_TAG"
          kubectl -n "${NS}" set image deploy/${{ env.FRONTEND_DEPLOY }} \
            ${{ env.FRONTEND_CONTAINER }}="${ACR}/frontend:${TAG}"
          kubectl -n "${NS}" rollout restart deploy/${{ env.FRONTEND_DEPLOY }}
          kubectl -n "${NS}" rollout status  deploy/${{ env.FRONTEND_DEPLOY }} --timeout=300s

      - name: Logout Azure
        if: always()
        run: az logout

name: CD - Deploy Frontend to AKS

on:
  workflow_call:
    inputs:
      product_api_ip:
        description: Product API URL (http://X.X.X.X:8000)
        required: true
        type: string
      order_api_ip:
        description: Order API URL (http://Y.Y.Y.Y:8001)
        required: true
        type: string
      customer_api_ip:
        description: Customer API URL (http://Z.Z.Z.Z:8002)
        required: true
        type: string
      k8s_namespace:
        required: true
        type: string
      aks_cluster_name:
        required: false
        type: string
      aks_resource_group:
        required: false
        type: string
      frontend_tag:
        required: false
        type: string
      build_in_cd:
        required: false
        type: boolean
        default: false
      acr_login_server:
        required: true
        type: string

permissions:
  contents: read

env:
  K8S_NAMESPACE: ${{ inputs.k8s_namespace }}
  FRONTEND_DEPLOY: frontend-w05-aks
  FRONTEND_CONTAINER: frontend-container
  ACR_LOGIN_SERVER: ${{ inputs.acr_login_server }}

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Resolve AKS and tag
        run: |
          AKS_RG="${{ inputs.aks_resource_group }}"
          [ -z "$AKS_RG" ] && AKS_RG="${{ secrets.AKS_RESOURCE_GROUP }}"
          echo "AKS_RG=$AKS_RG" >> $GITHUB_ENV

          AKS_NAME="${{ inputs.aks_cluster_name }}"
          [ -z "$AKS_NAME" ] && AKS_NAME="${{ secrets.AKS_CLUSTER_NAME }}"
          echo "AKS_NAME=$AKS_NAME" >> $GITHUB_ENV

          TAG="${{ inputs.frontend_tag }}"
          [ -z "$TAG" ] && TAG="latest"
          echo "FRONTEND_TAG=$TAG" >> $GITHUB_ENV

          echo "ACR_NAME=${ACR_LOGIN_SERVER%%.*}" >> $GITHUB_ENV

      - name: Set AKS context
        run: |
          az aks get-credentials -g "$AKS_RG" -n "$AKS_NAME" --overwrite-existing
          kubectl cluster-info

      - name: Ensure namespace exists
        run: kubectl get ns "$K8S_NAMESPACE" >/dev/null 2>&1 || kubectl create ns "$K8S_NAMESPACE"

      - name: Inject backend URLs into main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g"   frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g"       frontend/main.js
          sed -i "s|_CUSTOMER_API_URL_|${{ inputs.customer_api_ip }}|g" frontend/main.js

      - name: Optional build & push in CD
        if: ${{ inputs.build_in_cd == true }}
        run: |
          az acr login --name "$ACR_NAME"
          docker build -t ${ACR_LOGIN_SERVER}/frontend:${FRONTEND_TAG} ./frontend/
          docker push  ${ACR_LOGIN_SERVER}/frontend:${FRONTEND_TAG}

      - name: Apply manifests
        run: kubectl apply -n "$K8S_NAMESPACE" -f k8s/frontend.yaml

      - name: Set image & rollout
        run: |
          kubectl -n "$K8S_NAMESPACE" set image deploy/${{ env.FRONTEND_DEPLOY }} \
            ${{ env.FRONTEND_CONTAINER }}=${ACR_LOGIN_SERVER}/frontend:${FRONTEND_TAG}
          kubectl -n "$K8S_NAMESPACE" rollout restart deploy/${{ env.FRONTEND_DEPLOY }}
          kubectl -n "$K8S_NAMESPACE" rollout status  deploy/${{ env.FRONTEND_DEPLOY }} --timeout=300s

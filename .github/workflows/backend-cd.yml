name: CD - Deploy Backend Services to AKS

on:
  workflow_call:
    inputs:
      k8s_namespace:
        required: true
        type: string
      aks_cluster_name:
        required: false
        type: string
      aks_resource_group:
        required: false
        type: string
      acr_login_server:
        required: false
        type: string
    outputs:
      product_api_ip:
        description: "Product service External IP"
        value: ${{ jobs.deploy_backend.outputs.PRODUCT_API_IP }}
      order_api_ip:
        description: "Order service External IP"
        value: ${{ jobs.deploy_backend.outputs.ORDER_API_IP }}
      customer_api_ip:
        description: "Customer service External IP"
        value: ${{ jobs.deploy_backend.outputs.CUSTOMER_API_IP }}
  workflow_dispatch: {}

permissions:
  contents: read

env:
  # Default namespace (caller still passes their intended one)
  K8S_NAMESPACE: ecommerce

  # Deployment/Service names
  PRODUCT_DEPLOY:    product-service-w05-aks
  ORDER_DEPLOY:      order-service-w05-aks
  CUSTOMER_DEPLOY:   customer-service-w05-aks

  PRODUCT_SVC_NAME:  product-service-w05-aks
  ORDER_SVC_NAME:    order-service-w05-aks
  CUSTOMER_SVC_NAME: customer-service-w05-aks

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production
    outputs:
      PRODUCT_API_IP:  ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:    ${{ steps.get_order_ip.outputs.external_ip }}
      CUSTOMER_API_IP: ${{ steps.get_customer_ip.outputs.external_ip }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Resolve inputs (namespace, AKS, ACR)
        shell: bash
        env:
          INPUT_NS:              ${{ inputs.k8s_namespace }}
          INPUT_AKS_RG:          ${{ inputs.aks_resource_group }}
          INPUT_AKS_NAME:        ${{ inputs.aks_cluster_name }}
          INPUT_ACR_LOGIN:       ${{ inputs.acr_login_server }}
          SECRET_AKS_RG:         ${{ secrets.AKS_RESOURCE_GROUP }}
          SECRET_AKS_NAME:       ${{ secrets.AKS_CLUSTER_NAME }}
          SECRET_ACR_LOGIN:      ${{ secrets.AZURE_CONTAINER_REGISTRY }}
        run: |
          set -Eeuo pipefail

          NS_INPUT="${INPUT_NS:-${K8S_NAMESPACE}}"
          echo "K8S_NAMESPACE_RESOLVED=$NS_INPUT" >> $GITHUB_ENV

          AKS_RG="${INPUT_AKS_RG:-$SECRET_AKS_RG}"
          AKS_NAME="${INPUT_AKS_NAME:-$SECRET_AKS_NAME}"
          if [[ -z "$AKS_RG" || -z "$AKS_NAME" ]]; then
            echo "ERROR: Missing aks_resource_group/aks_cluster_name"; exit 1
          fi
          echo "AKS_RESOURCE_GROUP=$AKS_RG" >> $GITHUB_ENV
          echo "AKS_CLUSTER_NAME=$AKS_NAME" >> $GITHUB_ENV

          ACR_LOGIN="${INPUT_ACR_LOGIN:-$SECRET_ACR_LOGIN}"
          if [[ -z "$ACR_LOGIN" ]]; then
            echo "ERROR: acr_login_server not provided or secret missing"; exit 1
          fi
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN" >> $GITHUB_ENV
          ACR_NAME="${ACR_LOGIN%%.*}"
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV

      # --- Fix 1: attach ACR to AKS (idempotent) ---
      - name: Attach ACR to AKS (idempotent)
        shell: bash
        run: |
          set -Eeuo pipefail
          az aks update -g "$AKS_RESOURCE_GROUP" -n "$AKS_CLUSTER_NAME" --attach-acr "$ACR_NAME" || true

      - name: Set AKS context
        shell: bash
        run: |
          az aks get-credentials -g "$AKS_RESOURCE_GROUP" -n "$AKS_CLUSTER_NAME" --overwrite-existing
          kubectl cluster-info

      - name: Ensure namespace exists
        shell: bash
        run: |
          kubectl get ns "$K8S_NAMESPACE_RESOLVED" >/dev/null 2>&1 || kubectl create ns "$K8S_NAMESPACE_RESOLVED"

      # --- Fix 2: fallback image pull secret (works immediately if role propagation is slow) ---
      - name: Create/patch ACR imagePullSecret (fallback)
        shell: bash
        run: |
          set -Eeuo pipefail
          NS="$K8S_NAMESPACE_RESOLVED"
          # Ensure ACR admin is enabled to fetch a username/password
          az acr update -n "$ACR_NAME" --admin-enabled true >/dev/null
          ACR_USER=$(az acr credential show -n "$ACR_NAME" --query username -o tsv)
          ACR_PASS=$(az acr credential show -n "$ACR_NAME" --query 'passwords[0].value' -o tsv)
          kubectl -n "$NS" delete secret acr-pull --ignore-not-found
          kubectl -n "$NS" create secret docker-registry acr-pull \
            --docker-server="$ACR_LOGIN_SERVER" \
            --docker-username="$ACR_USER" \
            --docker-password="$ACR_PASS"
          # Patch default SA so all pods use it
          kubectl -n "$NS" patch serviceaccount default -p '{"imagePullSecrets":[{"name":"acr-pull"}]}' || true

      # Optional cleanup for fresh rollout
      - name: Delete old deployments (ignore if missing)
        shell: bash
        run: |
          set -Eeuo pipefail
          NS="$K8S_NAMESPACE_RESOLVED"
          kubectl -n "${NS}" delete deploy "${{ env.PRODUCT_DEPLOY }}"  --ignore-not-found
          kubectl -n "${NS}" delete deploy "${{ env.ORDER_DEPLOY }}"    --ignore-not-found
          kubectl -n "${NS}" delete deploy "${{ env.CUSTOMER_DEPLOY }}" --ignore-not-found

      - name: Apply base manifests (Config/Secrets + RabbitMQ)
        shell: bash
        run: |
          set -Eeuo pipefail
          NS="$K8S_NAMESPACE_RESOLVED"
          kubectl apply -n "${NS}" -f k8s/configmaps.yaml
          kubectl apply -n "${NS}" -f k8s/secrets.yaml
          kubectl apply -n "${NS}" -f k8s/rabbitmq.yaml || true

      - name: Wait for RabbitMQ (best-effort)
        shell: bash
        run: |
          set -Eeuo pipefail
          NS="$K8S_NAMESPACE_RESOLVED"
          if kubectl -n "${NS}" get statefulset rabbitmq >/dev/null 2>&1; then
            kubectl -n "${NS}" rollout status statefulset/rabbitmq --timeout=180s
          elif kubectl -n "${NS}" get deploy rabbitmq >/dev/null 2>&1; then
            kubectl -n "${NS}" rollout status deploy/rabbitmq --timeout=180s
          elif kubectl -n "${NS}" get deploy rabbitmq-deployment >/dev/null 2>&1; then
            kubectl -n "${NS}" rollout status deploy/rabbitmq-deployment --timeout=180s
          else
            echo "WARN: RabbitMQ workload not found; continuing"
          fi

      - name: Apply DBs and Backend services
        shell: bash
        run: |
          set -Eeuo pipefail
          NS="$K8S_NAMESPACE_RESOLVED"
          kubectl apply -n "${NS}" -f k8s/product-db.yaml
          kubectl apply -n "${NS}" -f k8s/order-db.yaml
          kubectl apply -n "${NS}" -f k8s/customer-db.yaml
          kubectl apply -n "${NS}" -f k8s/product-service.yaml
          kubectl apply -n "${NS}" -f k8s/order-service.yaml
          kubectl apply -n "${NS}" -f k8s/customer-service.yaml

      - name: Set images to ACR (:latest) and rollout
        shell: bash
        run: |
          set -Eeuo pipefail
          NS="$K8S_NAMESPACE_RESOLVED"
          ACR="$ACR_LOGIN_SERVER"
          kubectl -n "${NS}" set image deploy/${{ env.PRODUCT_DEPLOY }}   product-service-container="${ACR}/product_service:latest"
          kubectl -n "${NS}" set image deploy/${{ env.ORDER_DEPLOY }}     order-service-container="${ACR}/order_service:latest"
          kubectl -n "${NS}" set image deploy/${{ env.CUSTOMER_DEPLOY }}  customer-service-container="${ACR}/customer_service:latest"
          kubectl -n "${NS}" rollout restart deploy/${{ env.PRODUCT_DEPLOY }}
          kubectl -n "${NS}" rollout restart deploy/${{ env.ORDER_DEPLOY }}
          kubectl -n "${NS}" rollout restart deploy/${{ env.CUSTOMER_DEPLOY }}
          kubectl -n "${NS}" rollout status deploy/${{ env.PRODUCT_DEPLOY }}  --timeout=300s
          kubectl -n "${NS}" rollout status deploy/${{ env.ORDER_DEPLOY }}    --timeout=300s
          kubectl -n "${NS}" rollout status deploy/${{ env.CUSTOMER_DEPLOY }} --timeout=300s

      - name: Wait for Backend LoadBalancer IPs
        shell: bash
        run: |
          set -Eeuo pipefail
          NS="$K8S_NAMESPACE_RESOLVED"
          echo "Waiting for EXTERNAL-IPs in namespace ${NS}..."
          for i in $(seq 1 60); do
            PRODUCT_IP=$(kubectl get svc -n "${NS}" "$PRODUCT_SVC_NAME"  -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            ORDER_IP=$(kubectl   get svc -n "${NS}" "$ORDER_SVC_NAME"    -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            CUSTOMER_IP=$(kubectl get svc -n "${NS}" "$CUSTOMER_SVC_NAME" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" && -n "$CUSTOMER_IP" ]] && break
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" || -z "$CUSTOMER_IP" ]]; then
            echo "ERROR: Service EXTERNAL-IPs not assigned"
            kubectl get svc -n "${NS}"
            kubectl get pods -n "${NS}"
            exit 1
          fi
          echo "PRODUCT_IP=$PRODUCT_IP"   >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP"       >> $GITHUB_ENV
          echo "CUSTOMER_IP=$CUSTOMER_IP" >> $GITHUB_ENV

      - id: get_product_ip
        run: echo "external_ip=${PRODUCT_IP}" >> $GITHUB_OUTPUT
      - id: get_order_ip
        run: echo "external_ip=${ORDER_IP}" >> $GITHUB_OUTPUT
      - id: get_customer_ip
        run: echo "external_ip=${CUSTOMER_IP}" >> $GITHUB_OUTPUT

      - name: Summary
        shell: bash
        run: |
          echo "### Backend Service IPs (namespace: ${K8S_NAMESPACE_RESOLVED})" >> $GITHUB_STEP_SUMMARY
          echo "- Product:  http://${PRODUCT_IP}:8000"  >> $GITHUB_STEP_SUMMARY
          echo "- Order:    http://${ORDER_IP}:8001"    >> $GITHUB_STEP_SUMMARY
          echo "- Customer: http://${CUSTOMER_IP}:8002" >> $GITHUB_STEP_SUMMARY

      - name: Logout Azure
        if: always()
        run: az logout
